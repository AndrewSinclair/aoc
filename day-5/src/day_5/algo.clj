(ns day-5.algo)

(defn three-vowels?
  [word]
  (let [vowels [\a \e \i \o \u]]
    (>=
      (count (filter #(.contains vowels %) word))
      3)))

(defn double-letters?
  [word]
  (loop [letter-a (first word)
        [letter-b & rest] (next word)]
    (if (nil? letter-b)
      false
      (or (= letter-a letter-b)
          (recur letter-b rest)))))

(defn restricted-letters?
  [word]
  (let [restricted-digraphs ["ab" "cd" "pq" "xy"]]
    (some #(.contains word %) restricted-digraphs)))

(defn nice-1?
  [word]
  ((every-pred
      three-vowels?
      double-letters?
      #(not (restricted-letters? %)))
    word))


(defn update-pair-log
  "Update pairs in the map of key -> pair-id, value -> count"
  [pair-id pair-log]
  (update pair-log pair-id #(if (nil? %) 1 (inc %))))

(defn generate-pair-log
  "collect all pairs into a map of key -> letter, value -> count.
   Triples count as pairs. Four or more in a row should just return some dummy value indicating it."
  [word]
  (loop [[letter1 & rest] word
         accum {}]
    (let [letter2 (first rest)
          letter3 (second rest)]
      (cond
        (nil? letter2)
          accum
        (= letter1 letter2 letter3)
          (recur (next rest) (update-pair-log (vector letter1 letter2) accum))
        :else
          (recur rest (update-pair-log (vector letter1 letter2) accum))))))

(defn frequent-pair?
  "count the frequency of pairs generated by the pair log"
  [word]
  (some #(>= (second %) 2) (generate-pair-log word)))

(defn aba-pattern?
  "Check the word for occurence of 'aba' where 'a' and 'b' are any char"
  [word]
  (loop [[letter1 & rest] word]
    (let [letter2 (first  rest)
          letter3 (second rest)]
      (cond
        (nil? letter3)
          false
        (= letter1 letter3)
          true
        :else
          (recur rest)))))

(defn nice-2?
  [word]
  ((every-pred
    frequent-pair?
    aba-pattern?)
  word))

(defn do-algo-1
  "find the total number of 'nice strings' on santa's naughty list"
  [strings]
  (count (filter nice-1? strings)))

(defn do-algo-2
  "find the total number of 'nice strings' on santa's naughty list"
  [strings]
  (count (filter nice-2? strings)))

